%compare-strncmp
%readonly-tables
%define lookup-function-name lexer_lexeme_is_token
%delimiters=''
struct internal_token { const char *name; enum token_type type; };
%%
# -- Keywords section --
# attempted to have TAB as delimiter but could not make it work
#
# keywords
constTOKEN_KW_CONST
typeTOKEN_KW_TYPE
fnTOKEN_KW_FUNCTION
classTOKEN_KW_TYPECLASS
instanceTOKEN_KW_TYPEINSTANCE
ifTOKEN_KW_IF
elifTOKEN_KW_ELIF
elseTOKEN_KW_ELSE
returnTOKEN_KW_RETURN
# special symbols
:TOKEN_SM_COLON
{TOKEN_SM_OCBRACE
}TOKEN_SM_CCBRACE
[TOKEN_SM_OSBRACE
]TOKEN_SM_CSBRACE
(TOKEN_SM_OPAREN
)TOKEN_SM_CPAREN
"\""TOKEN_SM_DBLQUOTE
# binary operators
+TOKEN_OP_PLUS
-TOKEN_OP_MINUS
*TOKEN_OP_MULTI
/TOKEN_OP_DIV
=TOKEN_OP_ASSIGN
# binary comparison operators
==TOKEN_OP_EQ
!=TOKEN_OP_NEQ
>TOKEN_OP_GT
>=TOKEN_OP_GTEQ
<TOKEN_OP_LT
<=TOKEN_OP_LTEQ
# unary operators
&TOKEN_OP_AMPERSAND
++TOKEN_OP_INC
--TOKEN_OP_DEC
# type operators
|TOKEN_OP_TYPESUM
,TOKEN_OP_COMMA
->TOKEN_OP_IMPL
# other binary operators
.TOKEN_OP_MEMBER_ACCESS
# boolean operators
&&TOKEN_OP_LOGIC_AND
||TOKEN_OP_LOGIC_OR
# bitwise operators
^TOKEN_OP_BITWISE_XOR
